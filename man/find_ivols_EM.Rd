% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/find_weights.R
\name{find_ivols_EM}
\alias{find_ivols_EM}
\title{Finding the weights of the bivariate chi-bar-squared distribution using EM algorithm.}
\usage{
find_ivols_EM(d, m_samp, N = 20, v_init = NULL, init_mode = 0,
  lambda = 0, no_of_lcc_projections = 1, lcc_amount = 0,
  extrapolate = 0, selfdual = FALSE, data = NULL)
}
\arguments{
\item{d}{the dimension of the bivariate chi-bar squared distribution.}

\item{m_samp}{two-column matrix whose rows from iid samples from a bivariate
chi-bar-squared distribution.}

\item{N}{the number of iterates that shall be produced.}

\item{v_init}{the starting point for the EM iterates; if none are provided,
the starting point is found in a way specified by the input \code{init_mode}.}

\item{init_mode}{specifies the way through which the initial estimate is found:
\describe{
  \item{\code{init_mode==0}:}{uniform distribution}
  \item{\code{init_mode==1}:}{discretized normal distribution}
  \item{\code{init_mode==2}:}{circular cone fitting statdim}
  \item{\code{init_mode==3}:}{circular cone fitting variance}
  \item{\code{init_mode==4}:}{circular cone fitting statdim and variance (geometric mean)}
}
The starting point will be returned as the first row in the
output matrix.}

\item{lambda}{nonnegative parameters which, if positive, enforce the
log-concavity inequalities. Enforcing these may have negative
effects on the performance. \code{lambda} can be a scalar or vector of length \code{d-1}.}

\item{no_of_lcc_projections}{number of projections on the log-concavity cone}

\item{lcc_amount}{constant for strict log-concavity}

\item{extrapolate}{specifies the way the edge cases are handled:
\describe{
  \item{\code{extrapolate==0}:}{extrapolate \code{v_d} if no \code{x in C} and
                         extrapolate \code{v_0} if no \code{x in CÂ°}}
  \item{\code{extrapolate==1}:}{extrapolate \code{v_d}, do not extrapolate \code{v_0}}
  \item{\code{extrapolate==2}:}{extrapolate \code{v_0}, do not extrapolate \code{v_d}}
  \item{\code{extrapolate==3}:}{extrapolate \code{v_0} and \code{v_d}}
  \item{\code{extrapolate<0}:}{neither extrapolate \code{v_0} nor \code{v_d}}
}}

\item{selfdual}{logical; if \code{TRUE}, the symmetry equations \code{v[k+1]==v[d-k+1]},
with \code{k=0,...,d}, are enforced. These equations hold for
the intrinsic volumes of self-dual cones.}

\item{data}{output of \code{prepare_data(d, m_samp)}; this can be called
outside and passed as input to avoid re-executing this
potentially time-consuming step.}
}
\value{
The output of \code{find_ivols_EM} is a list of an \code{(N+1)}-by-\code{(d+1)}
        matrix whose rows constitute EM-type iterates, which may or may not
        converge to the maximum likelihood estimate of the mixing weights of
        the bivariate chi-bar-squared distribution, and the corresponding values
        of the log-likelihood function.
}
\description{
\code{find_ivols_EM} produces EM-type iterates from a two-column
matrix whose rows form iid samples from a bivariate chi-bar-squared
distribution, which may or may not (depending on the starting point) converge
to the maximum likelihood estimate of the mixing weights of the distribution.
}
\section{See also}{

\code{\link[conivol]{rbichibarsq}}, \code{\link[conivol]{circ_rbichibarsq}},
\code{\link[conivol]{rbichibarsq_polyh}}, \code{\link[conivol]{prepare_data}},
\code{\link[conivol]{init_v}}, \code{\link[conivol]{comp_loglike}}

Package: \code{\link[conivol]{conivol}}
}

\examples{
m_samp <- circ_rbichibarsq(10^6,c(5,5),c(pi/3,pi/4))
find_ivols_EM( 10, m_samp )
find_ivols_EM( 10, m_samp, init_mode=1 )

}
